;David Gulyas
;1302870
;CMPUT 325
;LAB H01
:Assignment 1

;QUESTION 1
;This function forms a list of pairs from the elements in a
;given list, in the way that the first two elements form the
;first pair, in the reversed order, and the next two form the
;second pair in the reversed order, and so on. If the given
;list is even, it will get a list of proper pairs; if it
;contains an odd number of elements, the last element is
;paired with itself.
;The function first tests if the list L is null. If it is it
;returns null since there is nothing left to process. It then
;tests if there is only one element left in the list. If there
;is then that element is paired with itself and stuck into
;another list. This is then returned.
;If there are two or more elements in the list then
;they are extracted and used to form a pair. This pair is then
;inserted into whatever is returned by the recursive call to
;the function using L minus the first two elements.
;(form-pair '(a1 b 2 c 3)) ==> ((1 a) (2 b) (3 c))
;(form-pair '(a1 b 2 c 3 d)) ==> ((1 a) (2 b) (3 c) (d d))
(defun form-pair (L)
    (if (null L)
        nil
        (if (null (cdr L))
            (cons (cons (car L) L) nil )
            (cons (cons (car (cdr L)) (cons (car L) nil))
            (form-pair (cdr (cdr L))))
        )
    )
)

;QUESTION 2
;(defun drop-pair L)
;This function takes L which is a list of pairs, each of which
;consists of two arithmetic expressions; the function returns
;the list with all expressions evaluated; in addition, if the
;two expressions in a pair evaluate to the same value, the pair
; will be dropped from the resulting list.
;It first tests for an empty list then returns nil if so. It then
;tests to see if the elements in the next pair evaluate to the same
;thing. If they do it returns nil else is evaluates each element and
;makes a new list of the values switched around. This is then cons'ed
;onto the front of the recursive call.
;eg (drop-pair (((* 2 3) (- 5 4)) ((+ 1 9) 7) ((* 3 4) 12))) -> ((1 6) (7 10))
(defun drop-pair (L)
    (if (null L)
        nil
        (if(eq (evalu (car (cdr (car L)))) (evalu(car (car L))))
            nil
            (cons (list (evalu (car (cdr (car L))))(evalu(car (car L)))) (drop-pair (cdr L)))
            )
    )
)


;This function replaces the eval function since it wasn't on the
;list of allowed functions.
;It first tests to see if L is atomic. If it is then we assume
;is is a number and return it. It then used apply to calculate
;the result. Right now it doesn't test to see if
;there are two elements or if those elements are numbers.
(defun evalu (L)
    (if (atom L)
        L
        (apply (car L) (cdr L))
    )
)

;QUESTION 3
;(remove-duplicate L)

;It takes x as a list of atoms and removes repeated atoms in x.
;The order of the elements in the resulting list should preserve
;the order in the given list.
;eg (remove-duplicate '(a b c a d b)) ==> (a b c d) or (c a d b)
;Note that in both the order in the given list is preserved.
;This is acomplished by going through the lists of tokens and testing
;if each token appears in the list ahead of it. If it does then it's
;discarded from the new list. If it doesn't then it's cons'ed onto the
;rest of the new list. 
(defun remove-duplicate (L)
    (if (null L)
        nil
        (if (null (test-duplicate (car L)(cdr L)))
            (remove-duplicate (cdr L))
            (cons (test-duplicate (car L)(cdr L)) (remove-duplicate (cdr L)))
        )
    )
)

"
tests if atom x is in list L
"
(defun test-duplicate (x L)
    (if (null L)
        x
        (if (eq x (car L))
            nil
            (test-duplicate x (cdr L))
        )
    )
)

"
;QUESTION 4
;(my-count L)
;
;Counts the distinct atoms in a non nested list.
;(my-count '(a b a c d c)) ==> 4
It does this by testing if the first character in L appears in
the rest of the list. If it doesn't it returns the number of
elements in the cdr of L. If it does It adds one to that value.
A better explanation is: if (car L) is in (cdr L) then we can
simply drop (car L) in our counting.
"
(defun my-count (L)
    (if (null L)
        0
        (if (null (test-duplicate (car L)(cdr L)))
            (my-count (cdr L))
            (+ 1 (my-count (cdr L)))
        )
    )
)

"
Question 5
Returns the power set of L.
calls real-power-set and inserts the null set into the returned list.
(power-set '(a b c)) ==> (NIL (A B C) (A B) (A C) (A) (B C) (B) (C))
"
(defun power-set (L)
    (if (null L)
        nil
        (cons nil (real-power-set L))
    )
)

"
Inserts the first element in L into a copy of every element that it gets back from itself.
Then inserts the first element by itself
eg.
a                  start with a
a ab b             insert b
a ab b ac abc bc c insert c
"
(defun real-power-set (L)
	(if (null L)
        nil
        (if (null (cdr L))
            (cons L nil)
             (append (insert (cons (car L) nil) (real-power-set (cdr L))) (real-power-set (cdr L)))
        )
    )
)

;inserts x at the front of all the elements in L including the null element
(defun insert (x L)
    (if (null L)
        (cons x nil)
        (cons (append x (car L)) (insert x (cdr L)))
    )
)




"
QUESTION 6a
findOne decides if the worst or best grade is wanted and calls the appropriate function
"
(defun findOne (Name Type L)
    (if (eq Type 'worst)
        (cdr (findWorst Name nil L))
        (cdr (findBest Name nil L))
    )
)

"
Finds the worst grade that Name has recieved and returns the course grade pair of that grade
Looks at the first Name Course Grade tuple in L. If the Name matchs name and the grade is
worse then the grade in worstSoFar then the tuple becomes the new worstSoFar. When L is
empty it returns worstSoFar.
"
(defun findWorst (Name worstSoFar L)
    (if (null L)
		worstSoFar
		(if  (eq (car (car L)) name) 
            (if (null worstSoFar)
                (findWorst name (car L) (cdr L))
                (if (< (toNumber (car (cdr (cdr (car L))))) (toNumber (car (cdr (cdr worstSoFar)))))
                    (findWorst name (car L) (cdr L))
                    (findWorst name worstSoFar (cdr L))
                )
            )
            (findWorst name worstSoFar (cdr L))
        )
    )
)

"
Finds the best grade that Name has recieved and returns the course grade pair of that grade
Looks at the first Name Course Grade tuple in L. If the Name matchs name and the grade is
higher then the grade in bestSoFar then the tuple becomes the new bestSoFar. When L is
empty it returns bestSoFar.
"
(defun findBest (Name bestSoFar L)
	(if (null L)
		bestSoFar
		(if  (eq (car (car L)) name) 
            (if (null bestSoFar)
                (findBest name (car L) (cdr L))
                (if (> (toNumber (car (cdr (cdr (car L))))) (toNumber (car (cdr (cdr bestSoFar)))))
                    (findBest name (car L) (cdr L))
                    (findBest name bestSoFar (cdr L))
                )
            )
            (findBest name bestSoFar (cdr L))
        )
    )
)

"
toNumber turns a grade into a number, enabling it to be compared with
other grades. x should be an atom.
"
(defun toNumber (x)
    (if (null x)
        nil
        (cond
            ((eq x 'F) 1)
            ((eq x 'D) 2)
            ((eq x 'D+) 3)
            ((eq x 'C-) 4)
            ((eq x 'C) 5)
            ((eq x 'C+) 6)
            ((eq x 'B-) 7)
            ((eq x 'B) 8)
            ((eq x 'B+) 9)
            ((eq x 'A-) 10)
            ((eq x 'A) 11)
            ((eq x 'A+) 12)
            (T nil)
        )
    )
)

"
QUESTION 6b
"
"
findAll only sorts the returned list from filterGrades. Ths was done because sorting
only needs to be done once at the end.
"
(defun findAll (name L)
    (if (null L)
        null
        (sortGrades(filterGrades name L))
        )
    )
)

"
Contains the recursive part of the question. The the cdr part of the first triple 
of L will be cons'ed onto the rest of the list if the name in the first triple 
of L matches the name argument. This leaves us with a list of course grade pairs
that belong to the name argument. 
"
(defun filterGrades (name L)
    (if (null L)
        nil
        (if (eq name (car(car L)))
            (cons (cdr(car L)) (filterGrades name (cdr L)))
            (filterGrades name (cdr L))
        )
    )
)

"
sort function for class grade pair. L is of the form
((cmputxxx grade)(cmputxxx grade)...)
"
(defun sortGrades (L)
    (sort L 'compareGrade)
)

"
tells the sort function how to compare two class grade pairs
L1 and L2 are class grade pairs of the form
(cmputxxx grade)
where grade is a valid letter grade
Returns true if the course number of L1 is less then the course number of L2
"
(defun compareGrade (L1 L2)
    (string-lessp (car L1) (car L2))
)

"
QUESTION 7a
reached tests if either of the arguments is null and removes x from the answer it gets from connected.
The heavy lifting is done by connected.
"
(defun reached (x L)
	(if (eq nil x)
		nil
		(if (eq nil L)
			nil
			(remove-atom x (connected nil (list x) L))
		)
	)
)

"
Connected is based off the hint given in the forum. It maintains the list of pages
visited(reached), a stack of pages not yet visited(stack) and the data set(L).
If stack is empty it returns reached. If the first element in stack has been reached
already, it cuts it off and calls the function again.
If it hasn't been reached, it looks at all the pages that are connected to it, adds those
pages to the stack and then adds itself to reached. Connected is then called again without
the first element in stack and the new values in reached.
"
(defun connected (reached stack L)
	(if (eq nil stack)
		reached
		(if (contains reached (car stack))
			(connected reached (cdr stack) L)
			(connected (cons (car stack) reached) 
					   (remove-duplicate (append stack (connected-atom (car stack) L))) 
					   L)
		)
	)
)

"
Tests if x is in L
x should be atom
L should be a non-nested list.
"
(defun contains (L x)
	(if (eq nil L)
		nil
		(if (eq (car L) x)
			T
			(contains (cdr L) x)
		)
	)
)

"
Given a list of pairs representing web page links(L), it returns a list
of all pages linked to from page x. 
"
(defun connected-atom (x L)
	(if (null x)
		nil
		(if (null L)
			nil
			(if (eq x (car(car L)))
				(cons (car(cdr(car L))) (connected-atom x (cdr L)))
				(connected-atom x (cdr L))
			)
		)
	)
)

"
remove-list removes all instances of any atom in L1 from L2
(remove-list '(A B) '(A B C D A B)) ==> (C D)
"
(defun remove-list (L1 L2)
	(if (null L1)
		L2
		(if (null L2)
			null 
			(remove-list (cdr L1) (remove-atom (car L1) L2))
		)
	)
)

"
remove-atom removes all instances of atom x from list L1
(remove-atom 'A '(A B C D A)) ==> (B C D)
"
(defun remove-atom (x L1)
	(if (null x)
		L1
		(if (null L1)
			nil
			(if (eq x (car L1))
				(remove-atom x (cdr L1))
				(cons (car L1) (remove-atom x (cdr L1)))
			)
		)
	)
)

"
QUESTION 7b
The importance of a web page could be determined by how many other web pages refer to it. A web page A is said to refer to another web page B iff A contains a link to B, and A and B are not the same web page (i.e., a web page referring to itself doesn't count). Define a function
(rank pages L)
where pages is a list of atoms naming web pages, and L is a list of pairs representing linkage. The function returns a permutation of pages such that the web pages are ordered according to the criterion above, i.e., the most referred web page is the first in the list, and so on. If two web pages are equally important in terms of references, then it doesn't matter how they are ordered.
"
(defun rank (pages L)
	(if (eq nil pages)
		nil
		(removeSecond (webSort (realRank pages L)))
	)
)

(defun realRank (pages L)
	(if (eq nil pages)
		nil
		(cons (list (car pages) (countLinks (car pages) L)) (realRank (cdr pages) L))
	)
)
		

(defun removeSecond (L)
	(if (eq nil L)
		nil
		(cons (car (car L)) (removeSecond (cdr L)))
	)
)

(defun countLinks (x L)
	(if (eq L nil)
		0
		(if (and (eq x (car (cdr (car L)))) (not (eq x (car (car L)))))
			(+ 1 (countLinks x (cdr L)))
			(countLinks x (cdr L))
		)
	)
)


(defun webSort (L)
	(sort L 'webGreaterThan)
)

(defun webGreaterThan (L1 L2)
	(> (car (cdr L1)) (car (cdr L2)))
)






